{"version":3,"sources":["index.js"],"names":["SaludarEnIdiomas","idioma","Saludo","aQuien","console","log","lenguajes","Tecnologias","map","lenguaje","index","App","render","id","document","getElementById","AppClase","Component","Mirar","cosa1","cosa2","cosa3","Button","useState","conteo","setConteo","useEffect","onClick","Botones","showButton","setShowButton"],"mappings":"iLAGMA,EAAmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxB,MAAe,OAAXA,EAAwB,qCACb,OAAXA,EAAwB,sCACb,OAAXA,EAAwB,wCACrB,uCAGLC,EAAS,SAAC,GAAwB,IAAtBD,EAAqB,EAArBA,OAAQE,EAAa,EAAbA,OAEtB,OADAC,QAAQC,IAAIF,GAER,8BACI,cAACH,EAAD,CAAkBC,OAAQA,IAD9B,IAC0CE,MAK9CG,EAAY,CAAC,aAAc,SAAU,OAAQ,KAM3CC,EAAc,WAChB,OACI,+BACK,IACAD,EAAUE,KAAI,SAACC,EAAUC,GAAX,OACX,6BAAiBD,GAARC,MACT,QAaVC,EAAM,WACR,OACI,+BACI,cAACT,EAAD,CAAQD,OAAO,KAAKE,OAAO,aAD/B,IAEI,cAACI,EAAD,QAQZK,iBAAO,cAACD,EAAD,CAAKE,GAAG,QAAUC,SAASC,eAAe,S,IAI3CC,E,4JACF,WACI,OAAO,6E,GAFQC,aAMvBL,iBAAO,cAACI,EAAD,IAAcF,SAASC,eAAe,UAc7C,IAAMG,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,aAAV,MAAkB,QAAlB,EAA2BC,EAA3B,EAA2BA,MAA3B,OACV,uCACWF,EADX,KACoBC,EADpB,MAC8BC,MAGlCT,iBAAO,cAACM,EAAD,CAAOC,MAAM,QAAQE,MAAM,UAAYP,SAASC,eAAe,UAEtE,IAAMO,EAAS,WAAM,MAIWC,mBAAS,GAJpB,mBAIVC,EAJU,KAIFC,EAJE,KAejB,OAVAC,qBAAU,WAGN,OAFAtB,QAAQC,IAAI,2BAEL,WACHD,QAAQC,IAAI,iCAEjB,IAKC,gCACI,6CAAgBmB,KAChB,wBAAQG,QAAS,kBAAMF,EAAUD,EAAS,IAA1C,2BAKNI,EAAU,WAAO,IAAD,EACkBL,oBAAS,GAD3B,mBACXM,EADW,KACCC,EADD,KAElB,OACI,gCACI,yBAAQH,QAAS,kBAAMG,GAAeD,IAAtC,UACK,IADL,cAEgB,OAEhB,8BAAMA,GAAc,cAACP,EAAD,UAKhCV,iBAAO,cAACgB,EAAD,IAAad,SAASC,eAAe,Y","file":"static/js/main.e6377c3b.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\n\nconst SaludarEnIdiomas = ({ idioma }) => {\n    if (idioma === \"es\") return <p>Hola</p>;\n    if (idioma === \"en\") return <p>Hello</p>;\n    if (idioma === \"fr\") return <p>Bonjour</p>;\n    return <p>Hello</p>;\n};\n\nconst Saludo = ({ idioma, aQuien }) => {\n    console.log(aQuien);\n    return (\n        <p>\n            <SaludarEnIdiomas idioma={idioma} /> {aQuien}\n        </p>\n    );\n};\n\nlet lenguajes = [\"JavaScript\", \"Python\", \"Ruby\", \"C\"];\n\n// aca vemos que se puede pasar una lista de elements jsx y lo va a poner como una secuencia de vdom\n// cuando metemos una lista de componentes a un componente de jsx cada elemento debe tener\n// una prop llamada key que debe ser diferente para cada elemento e identificarlos\n// el valor de key es para que en caso de que se modifique el arreglo react sabe que elemento tiene que actulizar\nconst Tecnologias = () => {\n    return (\n        <ul>\n            {\" \"}\n            {lenguajes.map((lenguaje, index) => (\n                <li key={index}>{lenguaje}</li>\n            ))}{\" \"}\n        </ul>\n    );\n};\n\n// funcion de javascript que retorna un componente de jsx vdom\n// los componenetes se invocan como si fueran tags de html\n// se puede usar self closing tags <Saludo /> si no es necesaro pasarle parametros\n\n// los componenetes que crea el usuario empiezan con mayusculas\n// mientras que losnativos empiezan con minuscula\n// guarda al llamar un componenete no es como un string\n// puede parecer como un salto de linea pero porque no estan en el mismo dom\nconst App = () => {\n    return (\n        <h1>\n            <Saludo idioma=\"es\" aQuien=\"Fernando\" />!\n            <Tecnologias />\n        </h1>\n    );\n};\n\n// aca renderizamos el vdom que devuelve app en el elemento de\n// de html con id root definido en public/index.html\n// la etiqueta en la que se agrega es App\nrender(<App id=\"app\" />, document.getElementById(\"root\"));\n\n// otra forma de crear componenetes es con una clase\n// que hereda de Component e implementa un metodo render\nclass AppClase extends Component {\n    render() {\n        return <h1> Componente creado con clase componente</h1>;\n    }\n}\n// si hago que este vdom apunte a root  sobreescribe todo lo demas\nrender(<AppClase />, document.getElementById(\"root1\"));\n\n// cada componente de react pasa por un proceso de renderizado en\n// cada actualizacion (en un componente de clase se ejecuta devuelte render() y en un componenete de funcion\n// se ejecuta la funcion)\n// cada componente devuelve una representacioin virtual la cual react transforma elemento de la interfaz grafica\n// que se  esta usando\n// React compara la representacion virtual con la real y si hya alguna diferencia hace el trabajo minimo para que coincidan\n\n/// Ejemplo de props\n\n// {texto} lo que hace es un destructuring, basicamente estamos indicando que propiedades recibimos como parametro\n// y con que nombre. Estos mismo atributos estan presentes en el objeto props pero de esta forma usamos directamente los atributos\n// podemos asignar valores por defecto por ecmascript6\nconst Mirar = ({ cosa1, cosa2 = \"horno\", cosa3 }) => (\n    <p>\n        Mirar {cosa1}, {cosa2} y {cosa3}\n    </p>\n);\nrender(<Mirar cosa1=\"Techo\" cosa3=\"Perro\" />, document.getElementById(\"root2\"));\n\nconst Button = () => {\n    // esto es un hook\n    // el primer parametro es la propiedad del estado y el segundo la funcion\n    // para sobreescrir esa propiedad\n    const [conteo, setConteo] = useState(0);\n    useEffect(() => {\n        console.log(\"Se ejecuto el useEffect\");\n\n        return () => {\n            console.log(\"Se elimina  el componenete\");\n        };\n    }, []); // si ponemos un array vacio como segundo parametro\n    // la funcion solo se ejecuta la primera vez y no en las actualizaciones\n    // si retronames una funcion estase ejecuta al eliminar el componente\n    // pero solo si limitamos la ejecucion al principio\n    return (\n        <div>\n            <p>Presionado: {conteo}</p>\n            <button onClick={() => setConteo(conteo + 1)}> Click Me</button>\n        </div>\n    );\n};\n\nconst Botones = () => {\n    const [showButton, setShowButton] = useState(true);\n    return (\n        <div>\n            <button onClick={() => setShowButton(!showButton)}>\n                {\" \"}\n                Reset boton{\" \"}\n            </button>\n            <div>{showButton && <Button />}</div>\n        </div>\n    );\n};\n\nrender(<Botones />, document.getElementById(\"root3\"));\n"],"sourceRoot":""}