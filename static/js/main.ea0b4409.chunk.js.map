{"version":3,"sources":["componentes/Button.jsx","componentes/Card.jsx","index.js"],"names":["Button","props","context","useContext","ThemeContext","style","backgroundColor","color","Card","SaludarEnIdiomas","idioma","Saludo","aQuien","console","log","lenguajes","Tecnologias","map","lenguaje","index","App","render","id","document","getElementById","AppClase","Component","Mirar","cosa1","cosa2","cosa3","useState","conteo","setConteo","useEffect","onClick","Botones","showButton","setShowButton","SaludoEvento","name","setName","type","onChange","ev","target","value","EventosApp","Form","showed","title","setTitle","body","setBody","firstInput","useRef","current","focus","onSubmit","e","preventDefault","fetch","method","JSON","stringify","userId","headers","then","response","json","htmlFor","ref","Acordeon","show","setShow","EjemploComponente","React","lazy","MostrarCodeSpliting","showSurprise","setShowSurprise","fallback","themes","createContext","EjemploReactContext","theme","setTheme","isDark","setIsDark","Provider"],"mappings":"wOAGe,SAASA,EAAOC,GAC3B,IAAMC,EAAUC,qBAAWC,GAC3B,OACI,wBACIC,MAAO,CACHC,gBAAiBJ,EAAQI,gBACzBC,MAAOL,EAAQK,OAHvB,uBCHO,SAASC,EAAKP,GACzB,IAAMC,EAAUC,qBAAWC,GAC3B,OACI,sBACIC,MAAO,CACHC,gBAAiBJ,EAAQI,gBACzBC,MAAOL,EAAQK,OAHvB,UAMI,2CACA,0DCRZ,IAAME,EAAmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxB,MAAe,OAAXA,EAAwB,qCACb,OAAXA,EAAwB,sCACb,OAAXA,EAAwB,wCACrB,uCAGLC,EAAS,SAAC,GAAwB,IAAtBD,EAAqB,EAArBA,OAAQE,EAAa,EAAbA,OAEtB,OADAC,QAAQC,IAAIF,GAER,+BACI,cAAC,EAAD,CAAkBF,OAAQA,IAD9B,IAC0CE,MAK9CG,EAAY,CAAC,aAAc,SAAU,OAAQ,KAM3CC,EAAc,WAChB,OACI,+BACK,IACAD,EAAUE,KAAI,SAACC,EAAUC,GAAX,OACX,6BAAiBD,GAARC,MACT,QAaVC,EAAM,WACR,OACI,gCACI,cAAC,EAAD,CAAQV,OAAO,KAAKE,OAAO,aAD/B,IAEI,cAAC,EAAD,QAQZS,iBAAO,cAAC,EAAD,CAAKC,GAAG,QAAUC,SAASC,eAAe,S,IAI3CC,E,4JACF,WACI,OAAO,6E,GAFQC,aAMvBL,iBAAO,cAAC,EAAD,IAAcE,SAASC,eAAe,UAc7C,IAAMG,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,aAAV,MAAkB,QAAlB,EAA2BC,EAA3B,EAA2BA,MAA3B,OACV,uCACWF,EADX,KACoBC,EADpB,MAC8BC,MAGlCT,iBAAO,cAAC,EAAD,CAAOO,MAAM,QAAQE,MAAM,UAAYP,SAASC,eAAe,UAEtE,IAAMxB,EAAS,WAAM,MAIW+B,mBAAS,GAJpB,mBAIVC,EAJU,KAIFC,EAJE,KAejB,OAVAC,qBAAU,WAGN,OAFArB,QAAQC,IAAI,2BAEL,WACHD,QAAQC,IAAI,iCAEjB,IAKC,gCACI,6CAAgBkB,KAChB,wBAAQG,QAAS,kBAAMF,EAAUD,EAAS,IAA1C,2BAKNI,EAAU,WAAO,IAAD,EACkBL,oBAAS,GAD3B,mBACXM,EADW,KACCC,EADD,KAElB,OACI,gCACI,yBAAQH,QAAS,kBAAMG,GAAeD,IAAtC,UACK,IADL,cAEgB,OAEhB,8BAAMA,GAAc,cAAC,EAAD,UAKhChB,iBAAO,cAAC,EAAD,IAAaE,SAASC,eAAe,UAE5C,IAAMe,EAAe,WAAO,IAAD,EACCR,mBAAS,IADV,mBAChBS,EADgB,KACVC,EADU,KAMvB,OACI,gCACI,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAQH,EAAQG,EAAGC,OAAOC,UACvD,uCAAUN,SAKhBO,EAAa,WACf,OACI,8BACI,cAAC,EAAD,OAKZ1B,iBAAO,cAAC,EAAD,IAAgBE,SAASC,eAAe,UAQ/C,IAAMwB,EAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACDlB,mBAAS,IADR,mBACpBmB,EADoB,KACbC,EADa,OAEHpB,mBAAS,IAFN,mBAEpBqB,EAFoB,KAEdC,EAFc,KAcnBC,EAAaC,mBACnBrB,qBAAU,WACFe,GACAK,EAAWE,QAAQC,UAExB,CAACR,IAqBJ,OACI,uBACIS,SAAU,SAACC,GACPA,EAAEC,iBArBVC,MAAM,6CAA8C,CAChDC,OAAQ,OACRV,KAAMW,KAAKC,UAAU,CACjBd,MAAOA,EACPE,KAAMA,EACNa,OAAQ,IAEZC,QAAS,CACL,eAAgB,qCAGnBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACHlB,EAAS,IACTE,EAAQ,IACRxC,QAAQC,IAAIuD,OAIpB,UAMI,gCACI,uBAAOC,QAAQ,QAAf,qBACA,uBACI5B,KAAK,OACLpB,GAAG,QACHwB,MAAOI,EACPqB,IAAKjB,EACLX,SAAU,SAACgB,GAAD,OAAOR,EAASQ,EAAEd,OAAOC,aAG3C,gCACI,uBAAOwB,QAAQ,OAAf,yBACA,0BACIhD,GAAG,OACHwB,MAAOM,EACPT,SAAU,SAACgB,GAAD,OAAON,EAAQM,EAAEd,OAAOC,aAG1C,uBAAOJ,KAAK,SAASI,MAAM,eAKjC0B,EAAW,WAAO,IAAD,EACKzC,oBAAS,GADd,mBACZ0C,EADY,KACNC,EADM,KAEnB,OACI,gCACI,qBAAKvC,QAAS,kBAAMuC,GAASD,IAA7B,kCACCA,GAAQ,cAAC,EAAD,CAAM3B,MAAO2B,EAAMxB,OAAQwB,QAKhDpD,iBAAO,cAAC,EAAD,IAAcE,SAASC,eAAe,UAW7C,IAAMmD,EAAoBC,IAAMC,MAAK,kBACjC,gCAGEC,EAAsB,WAAO,IAAD,EACU/C,oBAAS,GADnB,mBACvBgD,EADuB,KACTC,EADS,KAE9B,OACI,gCACI,wBAAQ7C,QAAS,SAACS,GAAD,OAAQoC,GAAiBD,IAA1C,8BAGCA,GACG,cAAC,WAAD,CAAUE,SAAU,4CAApB,SACI,cAACN,EAAD,UAOpBtD,iBAAO,cAAC,EAAD,IAAyBE,SAASC,eAAe,UAExD,IAAM0D,EACI,CACF5E,gBAAiB,QACjBC,MAAO,SAHT2E,EAKK,CACH5E,gBAAiB,QACjBC,MAAO,SAWFH,EAAewE,IAAMO,gBAC5BC,EAAsB,WAAO,IAAD,EACJrD,mBAASmD,GADL,mBACvBG,EADuB,KAChBC,EADgB,OAEFvD,mBAASsD,IAAUH,GAFjB,mBAEvBK,EAFuB,KAEfC,EAFe,KAG9B,OACI,gCACI,eAACpF,EAAaqF,SAAd,CAAuB3C,MAAOuC,EAA9B,UACI,cAAC,EAAD,IACA,cAAC7E,EAAD,OAEJ,wBACI2B,QAAS,WACDoD,GAAQD,EAASJ,GAChBK,GAAQD,EAASJ,GACtBM,GAAWD,IAJnB,6BAcZlE,iBAAO,cAAC,EAAD,IAAyBE,SAASC,eAAe,Y","file":"static/js/main.ea0b4409.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { ThemeContext } from \"../index.js\";\n\nexport default function Button(props) {\n    const context = useContext(ThemeContext);\n    return (\n        <button\n            style={{\n                backgroundColor: context.backgroundColor,\n                color: context.color,\n            }}\n        >\n            Click Me!\n        </button>\n    );\n}\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"../index.js\";\n\nexport default function Card(props) {\n    const context = useContext(ThemeContext);\n    return (\n        <div\n            style={{\n                backgroundColor: context.backgroundColor,\n                color: context.color,\n            }}\n        >\n            <p>Hola mundo</p>\n            <p>Esta es la descripcion</p>\n        </div>\n    );\n}\n","import React, { Component, useState, useEffect, useRef, Suspense } from \"react\";\nimport { render } from \"react-dom\";\nimport ButtonReact from \"./componentes/Button\";\nimport Card from \"./componentes/Card\";\n\nconst SaludarEnIdiomas = ({ idioma }) => {\n    if (idioma === \"es\") return <p>Hola</p>;\n    if (idioma === \"en\") return <p>Hello</p>;\n    if (idioma === \"fr\") return <p>Bonjour</p>;\n    return <p>Hello</p>;\n};\n\nconst Saludo = ({ idioma, aQuien }) => {\n    console.log(aQuien);\n    return (\n        <h1>\n            <SaludarEnIdiomas idioma={idioma} /> {aQuien}\n        </h1>\n    );\n};\n\nlet lenguajes = [\"JavaScript\", \"Python\", \"Ruby\", \"C\"];\n\n// aca vemos que se puede pasar una lista de elements jsx y lo va a poner como una secuencia de vdom\n// cuando metemos una lista de componentes a un componente de jsx cada elemento debe tener\n// una prop llamada key que debe ser diferente para cada elemento e identificarlos\n// el valor de key es para que en caso de que se modifique el arreglo react sabe que elemento tiene que actulizar\nconst Tecnologias = () => {\n    return (\n        <ul>\n            {\" \"}\n            {lenguajes.map((lenguaje, index) => (\n                <li key={index}>{lenguaje}</li>\n            ))}{\" \"}\n        </ul>\n    );\n};\n\n// funcion de javascript que retorna un componente de jsx vdom\n// los componenetes se invocan como si fueran tags de html\n// se puede usar self closing tags <Saludo /> si no es necesaro pasarle parametros\n\n// los componenetes que crea el usuario empiezan con mayusculas\n// mientras que losnativos empiezan con minuscula\n// guarda al llamar un componenete no es como un string\n// puede parecer como un salto de linea pero porque no estan en el mismo dom\nconst App = () => {\n    return (\n        <div>\n            <Saludo idioma=\"es\" aQuien=\"Fernando\" />!\n            <Tecnologias />\n        </div>\n    );\n};\n\n// aca renderizamos el vdom que devuelve app en el elemento de\n// de html con id root definido en public/index.html\n// la etiqueta en la que se agrega es App\nrender(<App id=\"app\" />, document.getElementById(\"root\"));\n\n// otra forma de crear componenetes es con una clase\n// que hereda de Component e implementa un metodo render\nclass AppClase extends Component {\n    render() {\n        return <h1> Componente creado con clase componente</h1>;\n    }\n}\n// si hago que este vdom apunte a root  sobreescribe todo lo demas\nrender(<AppClase />, document.getElementById(\"root1\"));\n\n// cada componente de react pasa por un proceso de renderizado en\n// cada actualizacion (en un componente de clase se ejecuta devuelte render() y en un componenete de funcion\n// se ejecuta la funcion)\n// cada componente devuelve una representacioin virtual la cual react transforma elemento de la interfaz grafica\n// que se  esta usando\n// React compara la representacion virtual con la real y si hya alguna diferencia hace el trabajo minimo para que coincidan\n\n/// Ejemplo de props\n\n// {texto} lo que hace es un destructuring, basicamente estamos indicando que propiedades recibimos como parametro\n// y con que nombre. Estos mismo atributos estan presentes en el objeto props pero de esta forma usamos directamente los atributos\n// podemos asignar valores por defecto por ecmascript6\nconst Mirar = ({ cosa1, cosa2 = \"horno\", cosa3 }) => (\n    <p>\n        Mirar {cosa1}, {cosa2} y {cosa3}\n    </p>\n);\nrender(<Mirar cosa1=\"Techo\" cosa3=\"Perro\" />, document.getElementById(\"root2\"));\n\nconst Button = () => {\n    // esto es un hook\n    // el primer parametro es la propiedad del estado y el segundo la funcion\n    // para sobreescrir esa propiedad\n    const [conteo, setConteo] = useState(0);\n    useEffect(() => {\n        console.log(\"Se ejecuto el useEffect\");\n\n        return () => {\n            console.log(\"Se elimina  el componenete\");\n        };\n    }, []); // si ponemos un array vacio como segundo parametro\n    // la funcion solo se ejecuta la primera vez y no en las actualizaciones\n    // si retronames una funcion estase ejecuta al eliminar el componente\n    // pero solo si limitamos la ejecucion al principio\n    return (\n        <div>\n            <p>Presionado: {conteo}</p>\n            <button onClick={() => setConteo(conteo + 1)}> Click Me</button>\n        </div>\n    );\n};\n\nconst Botones = () => {\n    const [showButton, setShowButton] = useState(true);\n    return (\n        <div>\n            <button onClick={() => setShowButton(!showButton)}>\n                {\" \"}\n                Reset boton{\" \"}\n            </button>\n            <div>{showButton && <Button />}</div>\n        </div>\n    );\n};\n\nrender(<Botones />, document.getElementById(\"root3\"));\n\nconst SaludoEvento = () => {\n    const [name, setName] = useState(\"\");\n    // En jsx onChange se escribe con camelcase\n    // el primer parametro es lo que llamamos un syntecit event\n    //  tiene la misma informacion que el event cuando trabajamos con doms\n    // y eventlintesnert\n    return (\n        <div>\n            <input type=\"text\" onChange={(ev) => setName(ev.target.value)} />\n            <p> Hola {name}</p>\n        </div>\n    );\n};\n\nconst EventosApp = () => {\n    return (\n        <div>\n            <SaludoEvento />\n        </div>\n    );\n};\n\nrender(<EventosApp />, document.getElementById(\"root4\"));\n\n// trabajar con formularios podemos usar hooks para obtener los valores de\n// los inputs\n// para enviar un form no tenemos que creart un boton y ponerle un onclick\n// eso romple como funciona html ya que ahora no envia si aprieto enter\n// tambien si en vez de usar un form usaba un div tampoco serviria\n// tenemos que sio si usar un form con un input o button ipo submit\nconst Form = ({ showed }) => {\n    let [title, setTitle] = useState(\"\");\n    let [body, setBody] = useState(\"\");\n\n    // actualizar el dom es uun efecto secundario por lo que tenemos que hacerloa aca\n    // en el array pongo que variable esperamos a que se modifique\n\n    // esta es la libreria que usamos cuando queremos\n    // acceder directamente al dom\n    // aunque siempre que se pueda es mejor que react se\n    // encargue de hacerlo\n\n    // en el input al que quiero apuntar debe haber una\n    // atributo ref con valor firstInput\n    const firstInput = useRef();\n    useEffect(() => {\n        if (showed) {\n            firstInput.current.focus();\n        }\n    }, [showed]);\n\n    const sendForm = () => {\n        fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                title: title,\n                body: body,\n                userId: 1,\n            }),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n            },\n        })\n            .then((response) => response.json())\n            .then((json) => {\n                setTitle(\"\");\n                setBody(\"\");\n                console.log(json);\n            });\n    };\n    return (\n        <form\n            onSubmit={(e) => {\n                e.preventDefault();\n                sendForm();\n            }}\n        >\n            <div>\n                <label htmlFor=\"title\">Titulo </label>\n                <input\n                    type=\"text\"\n                    id=\"title\"\n                    value={title}\n                    ref={firstInput}\n                    onChange={(e) => setTitle(e.target.value)}\n                />\n            </div>\n            <div>\n                <label htmlFor=\"body\">Publicacion</label>\n                <textarea\n                    id=\"body\"\n                    value={body}\n                    onChange={(e) => setBody(e.target.value)}\n                />\n            </div>\n            <input type=\"submit\" value=\"Enviar\" />\n        </form>\n    );\n};\n\nconst Acordeon = () => {\n    const [show, setShow] = useState(false);\n    return (\n        <div>\n            <div onClick={() => setShow(!show)}> Mostrar Formulario </div>\n            {show && <Form value={show} showed={show} />}\n        </div>\n    );\n};\n\nrender(<Acordeon />, document.getElementById(\"root5\"));\n\n// Esta seria la forma de importar elementos pero recien cuando lo necesitamos\n// Nuestro componenete no se descarga al principio sino onDemand\n// empieza a recorrer el arbol para hacer el render y cuando llega al punto de mostrarr ese\n// componente y lo solicita. Mientras se descarga ese componenete la actualizacion de\n// la interfaz se suspende\n// Cuando hay algo que  pausa la actualización de la interfaz debemos especificar\n// un componenete de respaldo\n\n// parece que para haceresto del import lazy es necesario que el import se haga con el degault\nconst EjemploComponente = React.lazy(() =>\n    import(\"./componentes/EjemploComponente\")\n);\n\nconst MostrarCodeSpliting = () => {\n    const [showSurprise, setShowSurprise] = useState(false);\n    return (\n        <div>\n            <button onClick={(ev) => setShowSurprise(!showSurprise)}>\n                Mostrar Sorpresa\n            </button>\n            {showSurprise && (\n                <Suspense fallback={<p>...Cargando</p>}>\n                    <EjemploComponente />\n                </Suspense>\n            )}\n        </div>\n    );\n};\n\nrender(<MostrarCodeSpliting />, document.getElementById(\"root6\"));\n\nconst themes = {\n    dark: {\n        backgroundColor: \"black\",\n        color: \"white\",\n    },\n    light: {\n        backgroundColor: \"white\",\n        color: \"black\",\n    },\n};\n\n// uso el componente ThemeContext para compartir informacion\n// entre los elementos hijos\n// cuando cambio las props de ThemeContext se actualizan para todos los hijos\n// dentro de los elementos que hijos de ThemeContext debemos\n// usar useContext\n// si tenemos muchos contextos debemos pasar el que queremos usar\n// tenemos que exportar este contexto e importarlo en el archivo\nexport const ThemeContext = React.createContext();\nconst EjemploReactContext = () => {\n    const [theme, setTheme] = useState(themes.dark);\n    const [isDark, setIsDark] = useState(theme === themes.dark);\n    return (\n        <div>\n            <ThemeContext.Provider value={theme}>\n                <ButtonReact />\n                <Card />\n            </ThemeContext.Provider>\n            <button\n                onClick={() => {\n                    if (isDark) setTheme(themes.light);\n                    if (!isDark) setTheme(themes.dark);\n                    setIsDark(!isDark);\n                }}\n            >\n                CambiarModo\n            </button>\n            {/* <button onClick={() => setTheme(themes.dark)}>Modo Obscuro</button> */}\n        </div>\n    );\n};\n\nrender(<EjemploReactContext />, document.getElementById(\"root7\"));\n"],"sourceRoot":""}